Noah Lewis, May 2, 2022

Spring 2022
CSC 4103 Operating Systems
Prof. Golden G. Richard III
Writing Assignemnt # 2
Due Date: May 4 at class time (NO LATE SUBMISSIONS)

Question 1 --------------------------------
    Given:
        - Virtual Space = 96 Pages, Page = 1,024 bytes
        - Physical Space = 32 Frames
    
    a.  log2(1024) = x | upper bound | offset into page
        Bits for offset = x = 10
        log2(96) = y   | upper bound | page
        Bits for page = y = 7
        Total bits = x + y = 17
    
    b.  log2(1024) = x | upper bound | offset into frame
        Bits for offset = x = 10
        log2(32) = y
        Bits for frame = y = 5
        Total bits = x + y = 15 

Question 2 --------------------------------
    Given:
        - m = frames available
        - p = page reference string length
        - n = distinct page numbers in p
        - all m are empty

    a. n is the lower bound of page faults
    b. p is the upper bound of page faults

Question 3 --------------------------------
    Given:
        - Page reference string = 2, 3, 1, 2, 5, 3, 4, 6, 7, 7, 
                                  1, 0, 5, 4, 6, 2, 3, 0, 1, 7
        - Demand paging with 3 frames of memory
    
    a.  Work: frames start empty
            frames| - | - | -
                    2 | - | - added frame = 2, 1 page fault
                    2 | 3 | - added frame = 3, 1 page fault
                    2 | 3 | 1 added frame = 1, 1 page fault
                    2 | 3 | 1 added frame = 2, 0 page faults
                    2 | 5 | 1 added frame = 5, 1 page fault
                    2 | 5 | 3 added frame = 3, 1 page fault
                    4 | 5 | 3 added frame = 4, 1 page fault
                    4 | 6 | 3 added frame = 6, 1 page fault
                    4 | 6 | 7 added frame = 7, 1 page fault
                    4 | 6 | 7 added frame = 7, 0 page faults
                    1 | 6 | 7 added frame = 1, 1 page fault
                    1 | 0 | 7 added frame = 0, 1 page fault
                    1 | 0 | 5 added frame = 5, 1 page fault
                    4 | 0 | 5 added frame = 4, 1 page fault
                    4 | 6 | 5 added frame = 6, 1 page fault
                    4 | 6 | 2 added frame = 2, 1 page fault
                    3 | 6 | 2 added frame = 3, 1 page fault
                    3 | 0 | 2 added frame = 0, 1 page fault
                    3 | 0 | 1 added frame = 1, 1 page fault
                    7 | 0 | 1 added frame = 7, 1 page fault
        Total page faults = 18
    
    b. Work: frames start empty
            frames| - | - | -
                    2 | - | - added frame = 2, 1 page fault
                    2 | 3 | - added frame = 3, 1 page fault
                    2 | 3 | 1 added frame = 1, 1 page fault
                    2 | 3 | 1 added frame = 2, 0 page faults
                    5 | 3 | 1 added frame = 5, 1 page fault
                    5 | 3 | 1 added frame = 3, 0 page faults
                    5 | 4 | 1 added frame = 4, 1 page fault
                    5 | 4 | 6 added frame = 6, 1 page fault
                    7 | 4 | 6 added frame = 7, 1 page fault
                    7 | 4 | 6 added frame = 7, 0 page faults
                    7 | 1 | 6 added frame = 1, 1 page fault
                    7 | 1 | 0 added frame = 0, 1 page fault
                    5 | 1 | 0 added frame = 5, 1 page fault
                    5 | 4 | 0 added frame = 4, 1 page fault
                    5 | 4 | 6 added frame = 6, 1 page fault
                    2 | 4 | 6 added frame = 2, 1 page fault
                    2 | 3 | 6 added frame = 3, 1 page fault
                    2 | 3 | 0 added frame = 0, 1 page fault
                    1 | 3 | 0 added frame = 1, 1 page fault
                    1 | 7 | 0 added frmae = 7, 1 page fault
        Total page faults = 17

    c. Work: frame start empty
            frames | - | - | - 
                     2 | - | - added frame = 2, 1 page fault
                     2 | 3 | - added frame = 3, 1 page fault
                     2 | 3 | 1 added frame = 1, 1 page fault
                     2 | 3 | 1 added frame = 2, 0 page faults
                     5 | 3 | 1 added frame = 5, 1 page fault
                     5 | 3 | 1 added frame = 3, 0 page faults
                     5 | 4 | 1 added frame = 4, 1 page fault
                     5 | 6 | 1 added frame = 6, 1 page fault
                     5 | 7 | 1 added frame = 7, 1 page fault
                     5 | 7 | 1 added frame = 7, 0 page faults
                     5 | 7 | 1 added frame = 1, 0 page faults
                     5 | 0 | 1 added frame = 0, 1 page fault
                     5 | 0 | 1 added frame = 5, 0 page faults
                     4 | 0 | 1 added frame = 4, 1 page fault
                     6 | 0 | 1 added frame = 6, 1 page fault
                     2 | 0 | 1 added frame = 2, 1 page fault
                     3 | 0 | 1 added frame = 3, 1 page fault
                     3 | 0 | 1 added frame = 0, 0 page faults
                     3 | 0 | 1 added frame = 1, 0 page faults
                     3 | 0 | 7 added frame = 7, 1 page fault
        Total page fauts = 13

Question 4 --------------------------------
    Given:
        - 12 direct block numbers
        - 1 indirect
        - 1 double indirect
        - 1 triple indirect
        - Block size = 4096 bytes
        - Block number size = 8 bytes

    a.  direct blocks total bytes         = 12 
        indirect block total bytes        = 12 * 12 = 144 
        double indirect block total bytes = 12 * 12 * 12 = 1728 
        triple indirect block total bytes = 12 * 12 * 12 * 12 = 20736
        total blocks = 12 + 144 + 1728 + 20736 = 22620 blocks
    b.  log2(4096) = x
        x = 12
        total bits = 12

Question 5 --------------------------------
    NOTE::This is a strong writers solution
    
    monitor_var writeable;
    int readers = 0;

    Monitor{
        start_read(){
            readers++;
        }   

        end_read(){
            readers--;

            if(readers == 0)
                writeable.signal();
        }

        start_write(){
            if(readers > 0)
                writable.wait();

            << write here >>
        }
    }

    OutsideMoniter{
        readers(){
            loop(){
                Monitor.start_read();

                << read here >>

                Monitor.end_read();   
            }
        }
        
        writers(){
            loop(){
                Monitor.write();
            }
        }
    }
